
==========

ADD ENTRY
.) если (isClass(provide) И !deps И !useClass) тогда useClass = provide

==========

RESOLVE
.) если useValue, то просто его вернуть, иначе

Резолв инстанса класса.
  - если useClass это класс

 1) определить список параметров конструктора
   - из deps
   - из Reflect.hasOwnMetadata("design:paramtypes", constructor) -> Reflect.getOwnMetadata
 2) заполнить параметры конструктора
   - для deps просто передать в конструктор
   - иначе каждый из параметров сначала надо зарезолвить

Резолв токена.

==========

Normal use:
 {provide: Duck, useClass: Duck}
 {provide: Duck, useClass: Duck, deps: ['quack!']}
 {provide: Turkey, useClass: Duck, deps: ['ololo!']}
 {provide: Duck, useValue: 123}
 {provide: Turkey, useClass: Turkey, deps: ['ololo!'], useValue: 123}
 {provide: "Bird", useClass: Duck, multi: true}
 {provide: "Bird", useClass: Turkey, multi: true}
 {provide: "Bird", useValue: 'Eagle', multi: true}



new Map<any, IEntry[]>([
  [Duck, [{provide: Duck, useClass: Duck}]],
  [Turkey, [{provide: Turkey, useClass: Duck, deps: ['ololo!']}]],
  ['IBird', [
    {provide: 'IBird', useClass: Duck, multi: true},
    {provide: 'IBird', useClass: Turkey, multi: true},
  ]],
])
